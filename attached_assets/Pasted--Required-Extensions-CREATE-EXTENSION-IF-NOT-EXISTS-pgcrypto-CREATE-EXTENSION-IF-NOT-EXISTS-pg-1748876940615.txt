- - Required Extensions
CREATE EXTENSION IF NOT EXISTS pgcrypto;
CREATE EXTENSION IF NOT EXISTS pg_cron;
CREATE EXTENSION IF NOT EXISTS pg_net;
- - ENUM TYPES
DO $$
BEGIN
IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'subscription_type') THEN
CREATE TYPE subscription_type AS ENUM ('Trial', 'Monthly', 'Quarterly', 'Lifetime');
END IF;

IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'subscription_status') THEN
CREATE TYPE subscription_status AS ENUM ('Active', 'Suspended', 'Cancelled', 'inActive', 'Expired');
END IF;
END $$;

- - First, safely remove the role column if it exists
DO $$
BEGIN
IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'subscriptions' AND column_name = 'role') THEN
ALTER TABLE public.subscriptions DROP COLUMN role;
END IF;
END $$;
- - Add access_code to subscriptions table if it doesn't exist
DO $$
BEGIN
IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'subscriptions' AND column_name = 'access_code') THEN
ALTER TABLE public.subscriptions ADD COLUMN access_code VARCHAR(5);
END IF;
END $$;
- - Generate default access codes for existing users who don't have one
UPDATE public.subscriptions
SET access_code = UPPER(LEFT(MD5(RANDOM()::text), 5))
WHERE access_code IS NULL;
- - Add unique constraint if it doesn't exist
DO $$
BEGIN
IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'subscriptions_access_code_key') THEN
ALTER TABLE public.subscriptions ADD CONSTRAINT subscriptions_access_code_key UNIQUE (access_code);
END IF;
END $$;
- - Make access_code required for new users
ALTER TABLE public.subscriptions
ALTER COLUMN access_code SET NOT NULL;
- - Create permissions table if it doesn't exist
CREATE TABLE IF NOT EXISTS public.permissions (
id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
user_id UUID REFERENCES auth.users NOT NULL UNIQUE,
can_manage_products BOOLEAN DEFAULT true,
can_manage_clients BOOLEAN DEFAULT true,
can_manage_receipts BOOLEAN DEFAULT true,
can_view_financial BOOLEAN DEFAULT false,
can_manage_purchases BOOLEAN DEFAULT false,
can_access_dashboard BOOLEAN DEFAULT true,
created_at TIMESTAMPTZ DEFAULT NOW(),
updated_at TIMESTAMPTZ DEFAULT NOW()
);
- - Enable RLS on permissions
ALTER TABLE public.permissions ENABLE ROW LEVEL SECURITY;
- - Drop existing policies if they exist
DROP POLICY IF EXISTS "Users can view their own permissions" ON permissions;
DROP POLICY IF EXISTS "Admins can manage all permissions" ON permissions;
- - RLS policies for permissions
CREATE POLICY "Users can view their own permissions" ON permissions
FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can manage their own permissions" ON permissions
FOR ALL USING (auth.uid() = user_id);

- - Create default permissions for existing users who don't have permissions yet
INSERT INTO public.permissions (user_id, can_view_financial, can_manage_purchases)
SELECT user_id, false, false
FROM public.subscriptions
WHERE NOT EXISTS (
SELECT 1 FROM public.permissions WHERE permissions.user_id = subscriptions.user_id
);
- - Drop existing function and trigger
DROP TRIGGER IF EXISTS handle_new_user_trigger ON auth.users;
DROP FUNCTION IF EXISTS public.handle_new_user();
- - Update the handle_new_user function to create access code and default permissions
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
DECLARE
_display_name TEXT;
_store_name TEXT;
_referred_by TEXT;
_access_code VARCHAR(5);
_referral_code VARCHAR(4);
_error_message TEXT;
detail TEXT;
hint TEXT;
BEGIN
-- Log incoming data
RAISE NOTICE 'Creating subscription for user: %, email: %', [NEW.id](http://new.id/), NEW.email;
- - Extract metadata with proper defaults
_display_name := COALESCE(
NULLIF(TRIM(NEW.raw_user_meta_data->>'display_name'), ''),
SPLIT_PART(NEW.email, '@', 1)
);

_store_name := COALESCE(
NULLIF(TRIM(NEW.raw_user_meta_data->>'store_name'), ''),
'Optique'
);

_referred_by := NULLIF(TRIM(COALESCE(NEW.raw_user_meta_data->>'referred_by', '')), '');

- - Handle access code - use provided one or generate unique one
_access_code := NULLIF(TRIM(COALESCE(NEW.raw_user_meta_data->>'access_code', '')), '');

IF _access_code IS NULL THEN
-- Generate unique access code
LOOP
_access_code := UPPER(LEFT(MD5(RANDOM()::text), 5));
EXIT WHEN NOT EXISTS (SELECT 1 FROM subscriptions WHERE access_code = _access_code);
END LOOP;
END IF;

- - Generate referral code if user was referred
IF _referred_by IS NOT NULL THEN
_referral_code := UPPER(LEFT(MD5(RANDOM()::text), 4));
ELSE
_referral_code := NULL;
END IF;

RAISE NOTICE 'Processed values: display_name: %, store_name: %, referred_by: %, access_code: %',
COALESCE(_display_name, 'null'),
COALESCE(_store_name, 'null'),
COALESCE(_referred_by, 'null'),
COALESCE(_access_code, 'null');

- - Insert new subscription with safe defaults
INSERT INTO public.subscriptions (
user_id,
email,
display_name,
start_date,
end_date,
subscription_type,
subscription_status,
trial_used,
access_code,
store_name,
referral_code,
referred_by
)
VALUES (
[NEW.id](http://new.id/),
NEW.email,
_display_name,
NOW(),
NOW() + INTERVAL '7 days',
'Trial',
'Active',
TRUE,
_access_code,
_store_name,
_referral_code,
_referred_by
)
ON CONFLICT (user_id) DO UPDATE SET
email = EXCLUDED.email,
display_name = EXCLUDED.display_name,
store_name = EXCLUDED.store_name,
access_code = EXCLUDED.access_code,
referral_code = EXCLUDED.referral_code,
referred_by = EXCLUDED.referred_by;

RAISE NOTICE 'Subscription created/updated successfully';

- - Create default Store Staff permissions
INSERT INTO public.permissions (
user_id,
can_manage_products,
can_manage_clients,
can_manage_receipts,
can_view_financial,
can_manage_purchases,
can_access_dashboard
)
VALUES (
[NEW.id](http://new.id/),
true,
true,
true,
false,
false,
true
)
ON CONFLICT (user_id) DO UPDATE SET
can_manage_products = EXCLUDED.can_manage_products,
can_manage_clients = EXCLUDED.can_manage_clients,
can_manage_receipts = EXCLUDED.can_manage_receipts,
can_view_financial = EXCLUDED.can_view_financial,
can_manage_purchases = EXCLUDED.can_manage_purchases,
can_access_dashboard = EXCLUDED.can_access_dashboard,
updated_at = NOW();

RAISE NOTICE 'Permissions created/updated successfully';
RETURN NEW;

EXCEPTION WHEN OTHERS THEN
GET STACKED DIAGNOSTICS
_error_message = MESSAGE_TEXT,
detail = PG_EXCEPTION_DETAIL,
hint = PG_EXCEPTION_HINT;

RAISE WARNING 'Error in handle_new_user trigger: %, Detail: %, Hint: %',
_error_message, detail, hint;
RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

- - Create trigger for new user registration
CREATE TRIGGER handle_new_user_trigger
AFTER INSERT ON auth.users
FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();
- - Function to check if access code is valid (for session elevation)
CREATE OR REPLACE FUNCTION public.check_access_code(input_access_code VARCHAR(5))
RETURNS TABLE (valid BOOLEAN, message TEXT) AS $$
DECLARE
code_exists BOOLEAN;
BEGIN
-- Check if access code exists
SELECT EXISTS(
SELECT 1 FROM subscriptions WHERE access_code = input_access_code
) INTO code_exists;

IF code_exists THEN
RETURN QUERY SELECT true, 'Valid access code';
ELSE
RETURN QUERY SELECT false, 'Invalid access code';
END IF;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

- - Function to get admin permissions (for session-based admin role)
CREATE OR REPLACE FUNCTION public.get_admin_permissions()
RETURNS TABLE (
can_manage_products BOOLEAN,
can_manage_clients BOOLEAN,
can_manage_receipts BOOLEAN,
can_view_financial BOOLEAN,
can_manage_purchases BOOLEAN,
can_access_dashboard BOOLEAN
) AS $$
BEGIN
RETURN QUERY SELECT true, true, true, true, true, true;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;